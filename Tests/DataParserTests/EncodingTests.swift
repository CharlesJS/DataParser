//
//  EncodingTests.swift
//  
//
//  Created by Charles Srstka on 3/13/23.
//

import DataParser
import XCTest

class EncodingTests: XCTestCase {
    func testEncoding() {
        checkCollection([] as Array)
        checkCollection([] as ContiguousArray<UInt8>)
        checkCollection(Data())
    }

    private func checkCollection(_ collection: some RangeReplaceableCollection<UInt8>) {
        var c = collection

        c.append(UInt8(0x01), byteOrder: .little)
        XCTAssertEqual(Array(c), [0x01])

        c.append(UInt8(0x02), byteOrder: .big)
        XCTAssertEqual(Array(c), [0x01, 0x02])

        c.append(Int8(0x03), byteOrder: .little)
        XCTAssertEqual(Array(c), [0x01, 0x02, 0x03])

        c.append(Int8(0x04), byteOrder: .big)
        XCTAssertEqual(Array(c), [0x01, 0x02, 0x03, 0x04])

        c.append(UInt16(0x0506), byteOrder: .little)
        XCTAssertEqual(Array(c), [0x01, 0x02, 0x03, 0x04, 0x06, 0x05])

        c.append(UInt16(0x0708), byteOrder: .big)
        XCTAssertEqual(Array(c), [0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08])

        c.append(Int16(0x090a), byteOrder: .little)
        XCTAssertEqual(Array(c), [0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09])

        c.append(Int16(0x0b0c), byteOrder: .big)
        XCTAssertEqual(Array(c), [0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c])

        c.append(UInt32(0x0d0e0f10), byteOrder: .little)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d
        ])

        c.append(UInt32(0x11121314), byteOrder: .big)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14
        ])

        c.append(Int32(0x15161718), byteOrder: .little)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15
        ])

        c.append(Int32(0x191a1b1c), byteOrder: .big)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c
        ])

        c.append(UInt64(0x1d1e1f2021222324), byteOrder: .little)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d
        ])

        c.append(UInt64(0x25262728292a2b2c), byteOrder: .big)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c
        ])

        c.append(Int64(0x2d2e2f3031323334), byteOrder: .little)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d
        ])

        c.append(Int64(0x35363738393a3b3c), byteOrder: .big)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c
        ])

        c.append(Float32(3.14159012), byteOrder: .little)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0xd0, 0x0f, 0x49, 0x40
        ])

        c.append(Float32(2.71828008), byteOrder: .big)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0xd0, 0x0f, 0x49, 0x40,
            0x40, 0x2d, 0xf8, 0x4d
        ])

        c.append(Float64(3.1415926535897931), byteOrder: .little)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0xd0, 0x0f, 0x49, 0x40,
            0x40, 0x2d, 0xf8, 0x4d, 0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x40
        ])

        c.append(Float64(2.718281828459045), byteOrder: .big)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0xd0, 0x0f, 0x49, 0x40,
            0x40, 0x2d, 0xf8, 0x4d, 0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x40, 0x40, 0x05, 0xbf, 0x0a,
            0x8b, 0x14, 0x57, 0x69
        ])

        c.appendTuple((UInt8(1), UInt8(2), UInt8(3)), unitType: UInt8.self, unitCount: 3, byteOrder: .little)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0xd0, 0x0f, 0x49, 0x40,
            0x40, 0x2d, 0xf8, 0x4d, 0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x40, 0x40, 0x05, 0xbf, 0x0a,
            0x8b, 0x14, 0x57, 0x69, 0x01, 0x02, 0x03
        ])

        c.appendTuple((Int8(4), Int8(5), Int8(6), Int8(7)), unitType: Int8.self, unitCount: 4, byteOrder: .big)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0xd0, 0x0f, 0x49, 0x40,
            0x40, 0x2d, 0xf8, 0x4d, 0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x40, 0x40, 0x05, 0xbf, 0x0a,
            0x8b, 0x14, 0x57, 0x69, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
        ])

        c.appendTuple(
            (Int8(9), Int8(10), Int8(11), Int8(12), Int8(13)),
            unitType: Int8.self,
            unitCount: 2,
            beginningAtIndex: 2,
            byteOrder: .little
        )
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0xd0, 0x0f, 0x49, 0x40,
            0x40, 0x2d, 0xf8, 0x4d, 0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x40, 0x40, 0x05, 0xbf, 0x0a,
            0x8b, 0x14, 0x57, 0x69, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x0b, 0x0c
        ])

        c.appendTuple((UInt16(0x1234), UInt16(0x5678)), unitType: UInt16.self, unitCount: 2, byteOrder: .little)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0xd0, 0x0f, 0x49, 0x40,
            0x40, 0x2d, 0xf8, 0x4d, 0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x40, 0x40, 0x05, 0xbf, 0x0a,
            0x8b, 0x14, 0x57, 0x69, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x0b, 0x0c, 0x34, 0x12, 0x78,
            0x56
        ])

        c.appendTuple((Int16(-25924), Int16(-8464)), unitType: Int16.self, unitCount: 2, byteOrder: .big)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0xd0, 0x0f, 0x49, 0x40,
            0x40, 0x2d, 0xf8, 0x4d, 0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x40, 0x40, 0x05, 0xbf, 0x0a,
            0x8b, 0x14, 0x57, 0x69, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x0b, 0x0c, 0x34, 0x12, 0x78,
            0x56, 0x9a, 0xbc, 0xde, 0xf0
        ])

        c.appendTuple(
            (UInt64(0x123456789abcdef0), UInt64(0x0fedcba987654321), UInt64(0x1122334455667788)),
            unitType: UInt64.self, unitCount: 2, beginningAtIndex: 1, byteOrder: .little)
        XCTAssertEqual(Array(c), [
            0x01, 0x02, 0x03, 0x04, 0x06, 0x05, 0x07, 0x08, 0x0a, 0x09, 0x0b, 0x0c, 0x10, 0x0f, 0x0e, 0x0d,
            0x11, 0x12, 0x13, 0x14, 0x18, 0x17, 0x16, 0x15, 0x19, 0x1a, 0x1b, 0x1c, 0x24, 0x23, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x2f, 0x2e, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0xd0, 0x0f, 0x49, 0x40,
            0x40, 0x2d, 0xf8, 0x4d, 0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x40, 0x40, 0x05, 0xbf, 0x0a,
            0x8b, 0x14, 0x57, 0x69, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x0b, 0x0c, 0x34, 0x12, 0x78,
            0x56, 0x9a, 0xbc, 0xde, 0xf0, 0x21, 0x43, 0x65, 0x87, 0xa9, 0xcb, 0xed, 0x0f, 0x88, 0x77, 0x66, 0x55,
            0x44, 0x33, 0x22, 0x11
        ])
    }
}
